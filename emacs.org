* Usefuls to have
- indent a region in org, or python, by a certain amount (n spaces)
  - or, remove =n= spaces at the beginning of a region
  - Solution:
    - =C-u C-x TAB= - indents by 4 spaces
    - =C-u <number> C-x TAB= - indents by <number> spaces
  - alternative:
    - =C-x TAB= - and then type left, right, or Shift-Left, Shift-Right
- insert =#+BEGIN_EXAMPLE ..\n #+END_EXAMPLE= template into org
  - Solution:
    - =<eTAB= - insert EXAMPLE
    - =<sTAB= - insert SRC
    - =<lTAB= - insert LaTeX
- directory tree / project tree structure
  - https://www.emacswiki.org/emacs/NeoTree
  - http://emacs.stackexchange.com/questions/413/tree-based-directory-browser
  - http://stackoverflow.com/questions/843645/a-good-project-tree-browser-for-emacs

* Interesting - to check out
- a simple way to see the Emacs path (and to compare with shell path):
  - =M-: (getenv "PATH")=
  - where =M-:= asks for elisp command to be evaluated.
- the [[https://github.com/realgud/realgud][RealGUD]] emacs debugger looks really good. Try it out. It might
  even come close to the IDLWave IDL debugger. Can be used with =pdb=
  and =ipdb=.

* Currently Adapting

Enclosing highligted regions [[http://stackoverflow.com/questions/2951797/wrapping-selecting-text-in-enclosing-characters-in-emacs][link]]:
|-------+-----------------------------|
| =M-(= | insert ( ) around region    |
| =M-[= | insert [ ] around region    |
| =M-{= | (insert { } around region)  |
| M-"   | insert " " around region    |
| =M-)= | (delete matching whatevers) |


Using the s-expression:
|-------------+-------------------------------|
| =C-M-f=     | Move forward by s-expression  |
| =C-M-b=     | Move backward by s-expression |
| =C-M-k=     | Kill s-expression             |
| =C-M-<SPC>= | Mark next s-expression        |

Use /other-window/ commands:
|----------------------------+----------------------------------------|
| =C-M-v=\ \ or\ \ =C-M-S-v= | Scroll other window                    |
| =C-x 4 C-f=                | Find file (go to other window)         |
| =C-x 4 C-o=                | Display buffer (stay in same window)   |
| =C-x 4 b=                  | Switch buffer (and go to other window) |

Save of regions in register and insert them in text:
|-----------+---------------------------|
| =C-x r s= | Store region in register  |
| =C-x r i= | Insert region in register |

Using the /mark-ring/ more efficiently:
|---------------+-----------------------------------------------------------------|
| =C-<SPC>=     | Set the mark, and toggle the region                             |
| =C-u C-<SPC>= | Jump to mark; repeated calls go further back in the /mark-ring/ |
| =C-x C-x=     | Exchanges point and mark; reactivates last region               |

|------------------------------+---------------------|
| =M-h=                        | Mark next paragraph |
| =M-@=                        | Next word           |
| =C-M-<SPC>=\ \ or\ \ =C-M-@= | Next s-expression   |
| =C-x h=                      | Whole buffer        |
| =C-M-h=                      | Next defun          |

Search and Replace:
|--------------------------+----------------------------|
| =C-M-s=\ \ or\ \ =C-M-r= | Regexp incremental search  |
| =M-s .=                  | Search for symbol at point |

|-----------------+--------------------------------------|
| =M-n=,\ \ =M-p= | Next/previous item in search history |
| =C-w=           | add word at point to search string   |

Other Movement Commands:
|-------------+--------------------------------------------|
| =M-r=       | Re-positions the cursor (similar to =C-l=) |
| =C-M-l=     | Re-positions the comment or definition     |
| =M-g M-g=   | Goto line                                  |
| =M-g <TAB>= | Goto column                                |

Other Editing Commands:
|---------------------+-----------------------------------------------|
| =C-x TAB=           | Then, left, right, or Shift-left, Shift-right |
| =C-u C-x TAB=       | Moves 4 spaces                                |
| =C-u <num> C-x TAB= | Moves <num> spaces                            |


Undo-redo with undo-tree
|----------------+----------------|
| =C-/= or =C-_= | Undo           |
| =C-?= or =M-_= | Redo           |
| =C-x u=        | Open undo-tree |

And the /always present/ modes / commands:
- occur
- imenu
- helm (to revisit: occur, google suggest, regexp builder, grep)
- projectile

* Movement

** Undo -- Undo-Ring
|--------------+------|
| =C-/=, =C-_= | Undo |
/Undo-ring/: the easiest way to break the cycle is by cursor movement.

TODO: experiment with visualizations of undo-ring trees or lists.

** Window Management

TODO: recheck the =winner-mode= for remembering window settings and to
undo and redo them with =C-c <left>= =C-c <right>=.

TODO: another useful mode is =windmove= that I probably use to switch
between windows using arrow keys.

The working with the /other window/ is binded to =C-x 4= prefix:
|--------------------+----------------------------------------|
| =C-x 4 C-f=        | Find file (go to other window)         |
| =C-x 4 C-o=        | Display buffer (stay in same window)   |
| =C-x 4 b=          | Switch buffer (and go to other window) |
| =C-M-v=, =C-M-S-v= | Scroll other window                    |

** Frame Management
Working with another frame is bound to the =C-x 5= prefix:
|--------------+-------------------------------|
| =C-x 5 0 =   | Delete active frame           |
| =C-x 5 1 =   | Delete other frame            |
| =C-x 5 2 =   | Opens a new frame             |
| =C-x 5 C-o = | Display buffer in other frame |
| =C-x 5 b =   | Switch buffer in other frame  |

** Elemental Movement
|-------------------------+--------------------------------------------------------|
| =M-m=                   | Move to the first non-whitespace character on the line |
| =C-M-f=                 | Move forward by s-expression                           |
| =C-M-b=                 | Move backward by s-expression                          |
| =C-M-k=                 | Kill s-expression                                      |
| =C-M-d=                 | Mode down into a list                                  |
| =C-M-u=                 | Move up out of a list (opening symbol)                 |
| =C-M-n=                 | Move forward to the next list                          |
| =C-M-p=                 | Move backward to the previous list                     |
| =M-{=                   | Move forward to the end of paragraph                   |
| =M-}=                   | Move backward to the start of paragraph                |
| =C-M-e=                 | Move to beginning of defun                             |
| =C-M-e=                 | Move to end of defun                                   |

|-------------------------+-------------------------------------------------------|
| =C-x <=,\ \ =C-<NEXT>=  | Scroll left (e.g. after =M-x toggle-truncate-lines= ) |
| =C-x >=,\ \ =C-<PRIOR>= | Scroll right                                          |

|-------------+--------------------------------------------|
| =M-r=       | Re-positions the cursor (similar to =C-l=) |
| =C-M-l=     | Re-positions the comment or definition     |
| =M-g M-g=   | Goto line                                  |
| =M-g <TAB>= | Goto column                                |


** bookmarks and registers
|-----------+---------------------------|
| =C-x r s= | Store region in register  |
| =C-x r i= | Insert region in register |

** Mark-Ring
|---------------+-----------------------------------------------------------------|
| =C-<SPC>=     | Set the mark, and toggle the region                             |
| =C-u C-<SPC>= | Jump to mark; repeated calls go further back in the /mark-ring/ |
| =C-x C-x=     | Exchanges point and mark; reactivates last region               |

Marking:
|------------------------------+---------------------|
| =M-h=                        | Mark next paragraph |
| =C-x h=                      | Whole buffer        |
| =C-M-h=                      | Next defun          |
| =M-@=                        | Next word           |
| =C-M-<SPC>=\ \ or\ \ =C-M-@= | Next s-expression   |
Repeated calls extend the mark (append to the mark). One can use as
well a numeric argument or the /negative argument/, e.g. =M-- M-@=.

** Searching
|---------------------+----------------------------|
| =C-M-s=,\ \ =C-M-r= | Regexp incremental search  |
| =M-s .=             | Search for symbol at point |

Commands after starting search:
|-----------------+----------------------------------------------------------|
| =M-n=,\ \ =M-p= | Next/previous item in search history                     |
| =C-M-i=         | TAB-complete search string against previous search items |
| =C-s C-s=       | Search starting with last searched string                |

|-------+--------------------------------------|
| =C-w= | add word at point to search string   |
| =C-y= | yank from clipboard to search string |

|---------+----------------------|
| =M-s r= | Toggle regexp search |
| =M-s w= | Toggle word mode     |



* org-mode
** Easy Templates
Type '<' followed by a template selector (below), followed by TAB.
|---+-----------------------------------|
| s | #+BEGIN_SRC ... #+END_SRC         |
| e | #+BEGIN_EXAMPLE ... #+END_EXAMPLE |
| q | #+BEGIN_QUOTE ... #+END_QUOTE     |
| v | #+BEGIN_VERSE ... #+END_VERSE     |
| c | #+BEGIN_CENTER ... #+END_CENTER   |
| l | #+BEGIN_LaTeX ... #+END_LaTeX     |
| L | #+LaTeX:                          |
| h | #+BEGIN_HTML ... #+END_HTML       |
| H | #+HTML:                           |
| a | #+BEGIN_ASCII ... #+END_ASCII     |
| A | #+ASCII:                          |
| i | #+INDEX: line                     |
| I | #+INCLUDE: line                   |
Additional templates can be added by customizing =org-structure-template-alist=

* Emacs Basic Commands and Functionality
Things that I tend to forget after a while, and which are good to revisit from time to time.

*Starting Emacs options*
|-------+------------------------------------------------------------------|
| ~-nw~ | terminal mode                                                    |
| ~-q~  | do not load an init file                                         |
| ~-Q~  | do not load any startup files (site-wide; X resorces, your init) |

*Keys*
|------+---------------------------|
| =C-= | Control                   |
| =M-= | Meta (Alt)                |
| =S-= | Shift                     |
| =s-= | Super                     |
| =H-= | Hyper                     |
| =A-= | Alt (redundant; not used) |

*Universal Arguments* Worth learning to use them (including digit and
negative arguments). Note the flexebility to maintain your tempo.
|----------------------------------+-------------------------------------|
| =C-u=                            | digit argument                    4 |
| =C-u C-u=                        | digit argument 16                   |
| =C-u= =...=                      | digit argument $4^n$                |
| =M-0= or =C-0= to =M-9= or =C-9= | digit argument 0 to 9               |
| =C--= or =M--= or =C-M--=        | negative argument                   |

*Elisp Code*
|-------------------+-----------------|
| =M-x eval buffer= | evaluate buffer |
| =M-x eval-region= | evaluate region |

*Package Management*

Add the ~ELPA~ (official), and ~Melpa~ and ~Marmelade~ (unofficial)
package repositories to your init file. The inofficial sites might go
down. Check the Emacs Wiki if problems appear.

*The Info Manual*

It's immensly useful to get information fast and convenient. It's
worth knowing the basic keybindings:
|-------------+--------------------------------------|
| =[= and =]= | Previous / next node                 |
| =l= and =r= | Go back / forward in history         |
| =p= and =n= | Previous / next sibling mode         |
| =u=         | Goes up one level                    |
| =SPC=       | Scroll one screen at a time          |
| =TAB=       | Cycles through links                 |
| =RET=       | Opens link                           |
| =m=         | Prompts for a menu item name to open |

*Emacs Help*
|---------+--------------------------------------|
| =C-a=   | Apropos command                      |
| =C-h m= | Info on major/minor mode (check it!) |
| =C-h f= | Info on function                     |
| =C-h v= | Info on variable                     |
| =C-h k= | Info on keybding                     |


* To be sorted
** Some Theory
The /coding system/ is given the first sign of the modline. e.g. =U=
means a /multi-byte/ coding system. Type =C-h C= for more info on
current and available coding systems.

The /line endings/ (second field/symbol of the modline) is usually one
of the three: =:= for unix-style, =DOS= for for Dos/Windows, and =Mac=
for old Macintosh line endings.

One distinguishes between /visual lines/ (as one sees on the screen
after the line breaking) and /logical lines/ (that can cover multiple
lines). Another terms sometimes used is /screen lines/ which basically
means the /visual lines/. The /visual line mode/ wraps by word
boundary.

The /syntax table/ can be displayed with =C-h s= (it might take some time).

** Working with Log Files
Emacs has an /auto compression mode/ that automatically de-compresses
and re-compresses files when you open and save them. Combined with
=M-x dired= one can browse compressed archives like directories.

The auto-revert mode can be very useful as well to monitor changing files.
|-----------------------------+---------------------------------------------------|
| =C-x C-r=                   | Open file in read-only mode                       |
| =C-x C-q=                   | Toggle read-only mode                             |
| =M-x flush-lines=           | Flush lines matching a pattern                    |
| =M-x keep-lines=            | Keep only lines matching a pattern                |
| =M-s o=                     | List lines matching a pattern                     |
| =M-s h p=                   | Highlight a phrase                                |
| =M-s h r=                   | Highlight regular expression                      |
| =M-s h .=                   | Highlight symbol at the point                     |
| =M-s h u=                   | Removes highlighting under point                  |
| =M-x auto-revert-mode=      | Reverts buffer when file changes                  |
| =M-x auto-revert-tail-mode= | Appends changes and follows; similar to =tail -f= |

** TRAMP: Remote File Editing
First, change the default protocol =tramp-default-method= to use
=ssh=. The TRAMP connections follow the syntax:
: /ssh:[user@]hostname[#port]:path
where =user= and =port= are optional, and tramp uses the =.ssh/config=
configuration as well.

One can start shells on the remote host and execute a lot of other commands.

Add as well the =sudo= command to the init file to switch to the sudo
mode when editing a file.



* COMMENT Configuration
#+TITLE: Emacs Usage
#+AUTHOR: mxn
